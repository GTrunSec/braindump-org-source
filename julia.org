#+TITLE: My Julia
#+AUTHOR: GTrunSec
#+EMAIL: gtrunsec@hardenedlinux.org
#+DATE: 18 September 2020
#+SETUPFILE: ./hugo.setup
#+SETUPFILE: ./theme-readtheorg.setup
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t


- Tags :: [[file:programming-languages.org][My learning Programming languages]]

* Julia (programming language)
:PROPERTIES:
:paradigm: Multi-paradigm: multiple dispatch (primary paradigm), procedural, functional, meta, multistaged
:designed-by: Jeff Bezanson, Alan Edelman, Stefan Karpinski, Viral B. Shah
:developer: Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors
:first-appeared: 2012; 8 years ago (2012)
:stable-release: 1.5.2, / 24 September 2020; 28 days ago (2020-09-24)
:preview-release: 1.6.0-DEV with daily updates (and 1.0.6 being worked on)
:typing-discipline: Dynamic, nominative, parametric, optional
:implementation-language: Julia, C, C++, Scheme, LLVM
:platform: Tier 1: x86-64, IA-32, 64-bit ARM, CUDA/NvidiaGPUs Tier 2: Windows 32-bit (64-bit is tier 1) Tier 3:32-bit ARM, PowerPC, AMD GPUs. Also has web browser support (for JavaScript and WebAssembly) and works in Android. For more details see "supported platforms".
:os:       Linux, macOS, Windows and FreeBSD
:license:  MIT (core), GPL v2; a makefile option omits GPL libraries
:filename-extensions: .jl
:website:  JuliaLang.org
:wikinfo-id: 38455554
:URL:      https://en.wikipedia.org?curid=38455554
:END:
Julia is a high-level, high-performance, dynamic programming language. While it is a general purpose language and can be used to write any application, many of its features are well-suited for numerical analysis and computational science.Distinctive aspects of Julia's design include a type system with parametric polymorphism in a dynamic programming language; with multiple dispatch as its core programming paradigm. Julia supports concurrent, (composable) parallel and distributed computing (with or without using MPI and/or the built-in corresponding to "OpenMP-style"threads), and direct calling of C and Fortran libraries without glue code.
* Environment
** Julia Jupyter
:PROPERTIES:
:ID:       6d821cd9-6a05-4c95-a4f2-9d561d1eeaf0
:END:
 - [2020-11-20 Fri 02:57] -> [[id:372518e1-2376-4d07-a38e-c6755acd2c55][GTrunSec/Jupyter-data-science-environment: Including Haskell, R, Julia,Python and Jupyter Kernels generated by Nix]]
* Improving the code speed

** [[https://discourse.julialang.org/t/improving-the-code-speed-by-employing-parallelism-for-asynchronous-task/47041][Improving the code speed by employing parallelism for asynchronous task - Usage / Performance - JuliaLang]]
* Julia tutorial or courses

** [[file:my-math.org][My math]] Julia math
*** [[file:mitmath-18S191.org][Course 18.S191 at MIT, fall 2020 - Introduction to computational thinking with Julia:]]
:PROPERTIES:
:header-args:sh: :dir ~/data/Jupyter-data-science-environment
:ID:       b6dc7a84-c972-4733-9dc1-d1ac105e2fee
:END:
 - [2020-11-20 Fri 03:01] -> [[id:d5edd4b2-2ad8-43ef-9390-bce5dfd41b7c][math course with Julia]]
** [[file:my-finance.org][My Finance]]
*** [[https://github.com/PaulSoderlind/EmpiricalFinancePhD][GitHub - PaulSoderlind/EmpiricalFinancePhD: Empirical Finance Course (PhD, Julia code)]]
:PROPERTIES:
:ID:       cb4b3236-09f5-4fa8-8195-e1399a5b101a
:END:

 - [2020-11-20 Fri 03:02] -> [[id:54f94d64-138c-4f43-8dc6-81c01654466f][financial course with Julia]]

** [[file:machine-learning.org][Machine Learning]]
:PROPERTIES:
:ID:       06e237f2-f098-4908-ad35-1d78a7e17a4d
:END:
- [2020-11-30 Mon 22:41] <- [[id:09f95585-c43f-46ac-8b07-e40b5b5ac596][18.337 - Parallel Computing and Scientific Machine Learning]]

** JuliaTutorial
*** [[https://github.com/hyper0x/JuliaBasics/tree/master/book][JuliaBasics/book at master · hyper0x/JuliaBasics]]
:PROPERTIES:
:header-args:sh: :dir ~/data
:END:


#+begin_src sh :async t :exports both :results output
git clone https://github.com/hyper0x/JuliaBasics.git
#+end_src

#+RESULTS:

*** [[https://github.com/PaulSoderlind/JuliaTutorial][PaulSoderlind/JuliaTutorial: Julia Tutorial for Finance and Econometrics Students]]
:PROPERTIES:
:ID:       68964ee9-2d40-46bc-bc6c-dbe4f8c6a120
:END:
 - [2020-11-20 Fri 03:03] -> [[id:54f94d64-138c-4f43-8dc6-81c01654466f][financial course with Julia]]

* Julia Packages

** Julia lsp
#+begin_src julia :async t :exports both :results output

import Pkg; Pkg.add("SymbolServer")
Pkg.add("LanguageServer")
Pkg.add("PackageCompiler")
Pkg.add("SymbolServer")
Pkg.add("StaticLint")
#+end_src
** Julia RCall
:PROPERTIES:
:ID:       deb99846-e7fd-49af-b6b3-ae3154277c08
:END:
#+begin_src sh :async t :exports both :results output
julia_wrapped -e 'using Pkg; Pkg.rm("RCall"); Pkg.add("RCall"); Pkg.build("RCall"); using RCall'
#+end_src
#+begin_src sh :async t :exports both :results output
julia_wrapped -e 'using Pkg;  Pkg.pin(PackageSpec(name="RCall", version="0.13.9"))'
#+end_src


* Python Support
** [[https://github.com/JuliaPy][JuliaPy · GitHub]]
*** [[https://github.com/JuliaPy/PyCall.jl][GitHub - JuliaPy/PyCall.jl: Package to call Python functions from the Julia language]]
*** [[https://github.com/JuliaPy/pyjulia][GitHub - JuliaPy/pyjulia: python interface to julia]]
* Julia math
** [[https://github.com/JuliaMath/Roots.jl][JuliaMath/Roots.jl: Root finding functions for Julia]]
* GeoStats
** [[https://github.com/JuliaEarth/GeoStats.jl][JuliaEarth/GeoStats.jl: An extensible framework for high-performance geostatistics in Julia]]
