#+TITLE: My Julia
#+AUTHOR: GTrunSec
#+EMAIL: gtrunsec@hardenedlinux.org
#+DATE: 18 September 2020
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en cn
#+SETUPFILE: ./hugo.setup
#+SETUPFILE: ~/Documents/my-blog/public/theme/org-html-themes/setup/theme-readtheorg.setup
#+hugo_publishdate: (0 5)
#+hugo_auto_set_lastmod: t
#+HUGO_categories:
#+HUGO_tags:
#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+PROPERTY: header-args:sh :prologue "exec 2>&1" :epilogue ":"

- tags :: [[file:programming-languages.org][My learning Programming languages]]

* Julia (programming language)
:PROPERTIES:
:paradigm: Multi-paradigm: multiple dispatch (primary paradigm), procedural, functional, meta, multistaged
:designed-by: Jeff Bezanson, Alan Edelman, Stefan Karpinski, Viral B. Shah
:developer: Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors
:first-appeared: 2012; 8 years ago (2012)
:stable-release: 1.5.2, / 24 September 2020; 28 days ago (2020-09-24)
:preview-release: 1.6.0-DEV with daily updates (and 1.0.6 being worked on)
:typing-discipline: Dynamic, nominative, parametric, optional
:implementation-language: Julia, C, C++, Scheme, LLVM
:platform: Tier 1: x86-64, IA-32, 64-bit ARM, CUDA/NvidiaGPUs Tier 2: Windows 32-bit (64-bit is tier 1) Tier 3:32-bit ARM, PowerPC, AMD GPUs. Also has web browser support (for JavaScript and WebAssembly) and works in Android. For more details see "supported platforms".
:os:       Linux, macOS, Windows and FreeBSD
:license:  MIT (core), GPL v2; a makefile option omits GPL libraries
:filename-extensions: .jl
:website:  JuliaLang.org
:wikinfo-id: 38455554
:URL:      https://en.wikipedia.org?curid=38455554
:END:
Julia is a high-level, high-performance, dynamic programming language. While it is a general purpose language and can be used to write any application, many of its features are well-suited for numerical analysis and computational science.Distinctive aspects of Julia's design include a type system with parametric polymorphism in a dynamic programming language; with multiple dispatch as its core programming paradigm. Julia supports concurrent, (composable) parallel and distributed computing (with or without using MPI and/or the built-in corresponding to "OpenMP-style"threads), and direct calling of C and Fortran libraries without glue code.
* Environment
** Jupyter
- [[file:Jupyter-data-science.org::*\[\[https://github.com/GTrunSec/Jupyter-data-science-environment\]\[GTrunSec/Jupyter-data-science-environment: Including Haskell, R, Julia,Python and Jupyter Kernels generated by Nix\]\]][GTrunSec/Jupyter-data-science-environment: Including Haskell, R, Julia,Python and Jupyter Kernels generated by Nix]]
* Improving the code speed

** [[https://discourse.julialang.org/t/improving-the-code-speed-by-employing-parallelism-for-asynchronous-task/47041][Improving the code speed by employing parallelism for asynchronous task - Usage / Performance - JuliaLang]]
* Julia tutorial or courses

** [[file:my-math.org][My math]] Julia math
*** [[https://github.com/mitmath/18S191][mitmath/18S191: Course 18.S191 at MIT, fall 2020 - Introduction to computational thinking with Julia:]]
:PROPERTIES:
:header-args:sh: :dir ~/data/Jupyter-data-science-environment
:ID:       3e3b70a4-a6de-4074-bb41-7c781b0fdfa3
:END:
:BACKLINKS:
[2020-09-21 Mon 02:49] <- [[id:345e238b-336d-4ed8-8d27-8a9f3168e26b][with Julia]]
:END:
**** Install Pluto
 - [[https://github.com/mitmath/18S191/blob/master/homework/homework0/Installing%20Julia%20%2B%20Pluto.md][18S191/Installing Julia + Pluto.md at master · mitmath/18S191]]

- run wrapped Julia on Jupyter-data-science
  #+begin_src sh :async t :exports both :results output
  nix-shell my-default.nix --option sandbox false
  #+end_src

- Install Pluto
  Notice: the ~Julia_pkgs~ will be installed under ~/data/Jupyter-data-science-environment~ dot file which name is ~.julia_pkgs~
#+begin_src sh :async t :exports both :results output
julia_wrapped -e 'using Pkg; Pkg.add(["Pluto"]);'
julia_wrapped -e 'using Pkg; Pkg.update();'
julia_wrapped -e 'using Pluto; Pluto.run()'
#+end_src


- open with specific ip and port

  #+begin_src sh :async t :exports both :results output
julia_wrapped -e 'using Pluto; Pluto.run("10.220.170.112", 8889)'
  #+end_src

**** Run hw0
:PROPERTIES:
:header-args:sh: :dir ~/data/Jupyter-data-science-environment/notebook
:END:

- https://github.com/mitmath/18S191/blob/master/homework/homework0/hw0.jl


#+begin_src sh :async t :exports both :results output
git clone https://github.com/mitmath/18S191
#+end_src

#+RESULTS:


** [[file:my-finance.org][My Finance]]
*** [[https://github.com/PaulSoderlind/EmpiricalFinancePhD][GitHub - PaulSoderlind/EmpiricalFinancePhD: Empirical Finance Course (PhD, Julia code)]]
:PROPERTIES:
:ID:       cb4b3236-09f5-4fa8-8195-e1399a5b101a
:END:
:BACKLINKS:
[2020-09-25 Fri 19:02] <- [[file:my-finance.org::*financial course with Julia][financial course with Julia]]
:END:

** [[file:machine-learning.org][Machine Learning]]
:PROPERTIES:
:ID:       06e237f2-f098-4908-ad35-1d78a7e17a4d
:END:
:RELATED:
[2020-09-26 Sat 20:46] -> [[id:09f95585-c43f-46ac-8b07-e40b5b5ac596][mitmath/18337: 18.337 - Parallel Computing and Scientific Machine Learning]]
:END:
** JuliaTutorial
*** [[https://github.com/hyper0x/JuliaBasics/tree/master/book][JuliaBasics/book at master · hyper0x/JuliaBasics]]
:PROPERTIES:
:header-args:sh: :dir ~/data
:END:


#+begin_src sh :async t :exports both :results output
git clone https://github.com/hyper0x/JuliaBasics.git
#+end_src

#+RESULTS:

*** [[https://github.com/PaulSoderlind/JuliaTutorial][PaulSoderlind/JuliaTutorial: Julia Tutorial for Finance and Econometrics Students]]
:PROPERTIES:
:ID:       68964ee9-2d40-46bc-bc6c-dbe4f8c6a120
:END:
:BACKLINKS:
[2020-09-25 Fri 19:12] <- [[file:my-finance.org::*financial course with Julia][financial course with Julia]]
:END:

* Julia Packages

** Julia lsp
#+begin_src julia :async t :exports both :results output
import Pkg; Pkg.add("SymbolServer")
Pkg.add("LanguageServer")
Pkg.add("PackageCompiler")
Pkg.add("SymbolServer")
Pkg.add("StaticLint")
#+end_src

** Julia RCall
:PROPERTIES:
:ID:       deb99846-e7fd-49af-b6b3-ae3154277c08
:END:
#+begin_src sh :async t :exports both :results output
julia_wrapped -e 'using Pkg; Pkg.rm("RCall"); Pkg.add("RCall"); Pkg.build("RCall"); using RCall'
#+end_src
#+begin_src sh :async t :exports both :results output
julia_wrapped -e 'using Pkg;  Pkg.pin(PackageSpec(name="RCall", version="0.13.9"))'
#+end_src


* Python Support
** [[https://github.com/JuliaPy][JuliaPy · GitHub]]
*** [[https://github.com/JuliaPy/PyCall.jl][GitHub - JuliaPy/PyCall.jl: Package to call Python functions from the Julia language]]
*** [[https://github.com/JuliaPy/pyjulia][GitHub - JuliaPy/pyjulia: python interface to julia]]
* Julia math
* GeoStats
** [[https://github.com/JuliaEarth/GeoStats.jl][JuliaEarth/GeoStats.jl: An extensible framework for high-performance geostatistics in Julia]]
