#+TITLE: Nix Flakes
#+AUTHOR: GTrunSec
#+EMAIL: gtrunsec@hardenedlinux.org
#+DATE: 2021-01-16 Sat 23:35
#+SETUPFILE: ~/Documents/org-notes/braindump/hugo.setup
#+SETUPFILE: ~/Documents/org-notes/braindump/theme-readtheorg.setup
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t


- tags :: [[file:GuangTao-nix.org][GuangTao's Nix]], [[file:nix-friday.org][Nix Friday]]

* learning flakes

- [[https://www.youtube.com/watch?v=98EwejpIJzE][Flakes in nix 3.0 - YouTube]]
- [[https://discourse.nixos.org/t/good-practice-for-nix-flakes/9706/2][Good practice for Nix Flakes - Learn - NixOS Discourse]]
- [[https://www.tweag.io/blog/2020-05-25-flakes/][Tweag - Nix Flakes, Part 1: An introduction and tutorial]]
- [[https://www.tweag.io/blog/2020-06-25-eval-cache/][Tweag - Nix Flakes, Part 2: Evaluation caching]]
- [[https://www.tweag.io/blog/2020-07-31-nixos-flakes/][Tweag - Nix Flakes, Part 3: Managing NixOS systems]]
* Nix flakes related
:PROPERTIES:
:ID:       0fbe152b-bad6-4054-a201-c51ab509ed73
:END:
- [2020-11-20 Fri 02:31] <- [[id:0ba37b42-f3e7-453a-b021-3f817b9264e8][Pushing Flake inputs to Cachix]]
- [2020-11-20 Fri 02:28] <- [[id:2e37c4e9-b74d-490c-9b12-fc5aade3de68][Nix Friday - Flakes! - YouTube]]
- [2020-11-09 Mon 22:30] -> [[id:fdf6b3e7-b611-449e-889b-bd8398b252e1][Nix flake issue]]
- [2020-11-09 Mon 15:40] -> [[id:8a9e45f4-fa22-41b9-9862-d653ea91822c][configuration flakes]]
- [2021-01-02 Sat 23:15] -> [[id:daf6fac0-3a1c-4b57-8073-90ad315e8a7e][“Jörg Thalheim: Nix flakes 101 (rC3 2020) - YouTube”🔊]]

* Nix Flakes wiki
:PROPERTIES:
:id: 0196e56d-f4d4-451d-8848-3f37119e7856
:END:
- [2020-12-19 Sat 14:35] <- [[id:b3517c38-80fc-490f-b0e9-7fef04fd854f][Nix Documents]]
** [[https://nixos.wiki/wiki/Flakes][Flakes - NixOS Wiki]]
- [[https://gist.github.com/edolstra/40da6e3a4d4ee8fd019395365e0772e7][nix-flakes.md]]
- option ~/.config/nix/nix.conf

  #+begin_src conf :async t :exports both :results output
  experimental-features = nix-command flakes
  #+end_src
** Flake Output scheme

  #+begin_src nix :async t :exports both :results output

{ self, ... }@inputs:
{
  # This will be shown in `nix flake info`
  description = "A description what his flake provides";
  # Executed by `nix flake check`
  checks."<system>"."<attr>" = derivation;
  # Executed by `nix build .#<name>`
  packages."<system>"."<attr>" = derivation;
  # Executed by `nix build .`
  defaultPackage."<system>" = derivation;
  # Executed by `nix run .#<name>`
  apps."<system>"."<attr>" = {
    type = "app";
    program = "<store-path>";
  };
  # Executed by `nix run . -- <args?>`
  defaultApp."<system>" = { type = "app"; program = "..."; };

  # Used for nixpkgs packages, also accessible via `nix build .#<name>`
  legacyPackages."<system>"."<attr>" = derivation;
  # Default overlay, for use in dependent flakes
  overlay = final: prev: { };
  # Same idea as overlay but a list or attrset of them.
  overlays = {};
  # Default module, for use in dependent flakes
  nixosModule = { config }: { options = {}; config = {}; };
  # Same idea as nixosModule but a list or attrset of them.
  nixosModules = {};
  # Attrset of nixos configurations by hostname.
  nixosConfigurations."<hostname>" = {};
  hydraJobs."<attr>"."<system>" = derivation;
  # Used by `nix flake init -t <flake>`
  defaultTemplate = {
    path = "<store-path>";
    description = "template description goes here?";
  };
  # Used by `nix flake init -t <flake>#<attr>`
  templates."<attr>" = { path = "<store-path>"; description = "";
}
#+end_src
** [[https://zimbatm.com/NixFlakes/#direnv-integration][Nix Flakes edition | $ zimbatm]]
:PROPERTIES:
:ID:       09df2341-7aa3-4f56-a823-04b4e591988d
:END:
- [2020-11-06 Fri 19:22] <- [[id:0ba37b42-f3e7-453a-b021-3f817b9264e8][Pushing Flake inputs to Cachix]]
** [[https://github.com/numtide/flake-utils][numtide/flake-utils: Pure Nix flake utility functions]]

- [[https://github.com/numtide/flake-utils/blob/master/examples/each-system/flake.nix][flake-utils/flake.nix at master · numtide/flake-utils]]
  + eachDefaultSystem

    #+begin_src nix :async t :exports both :results output

  {
    description = "Flake utils demo";

    inputs.flake-utils.url = "github:numtide/flake-utils";

    outputs = { self, nixpkgs, flake-utils }:
      flake-utils.lib.eachDefaultSystem (system:
        let pkgs = nixpkgs.legacyPackages.${system}; in
        rec {
          packages = flake-utils.lib.flattenTree {
            hello = pkgs.hello;
            gitAndTools = pkgs.gitAndTools;
          };
          defaultPackage = packages.hello;
          apps.hello = flake-utils.lib.mkApp { drv = packages.hello; };
          defaultApp = apps.hello;
        }
      );
  }
    #+end_src

  + simple-flake

- [[https://github.com/zimbatm/flake-static/tree/0cf37e62aae157409342a85f5f499f216bdcd2fe][zimbatm/flake-static at 0cf37e62aae157409342a85f5f499f216bdcd2fe]]

    + nixpkgs lib

#+begin_src sh :async t :exports both :results output

let
  importJSON = file: builtins.fromJSON (builtins.readFile file);
  flakeLock = importJSON ./flake.lock;
  loadInput = { locked, ... }:
    assert locked.type == "github";
    builtins.fetchTarball {
      url = "https://github.com/${locked.owner}/${locked.repo}/archive/${locked.rev}.tar.gz";
      sha256 = locked.narHash;
    };
  nixpkgs = loadInput flakeLock.nodes.nixpkgs;
in
import nixpkgs {
  config = { };
  overlays = [ ];
}

#+end_src

* hydra CI build packages
- [[https://github.com/edolstra/dhdm/blob/master/flake.nix][dhdm/flake.nix at master · edolstra/dhdm]]

#+begin_src nix :async t :exports both :results output
{
  inputs.nixpkgs.url = "nixpkgs/nixos-20.03";

  outputs = { self, nixpkgs }: {

    defaultPackage.x86_64-linux =
      with import nixpkgs { system = "x86_64-linux"; };
      stdenv.mkDerivation {
        name = "dhdm";
        buildInputs = [ mesa_glu glew glfw libpng glm fmt nlohmann_json opensubdiv boost ];
        src = self;
        preBuild = "cd src";
        installPhase = "mkdir -p $out/bin; cp dhdm $out/bin/";
        enableParallelBuilding = true;
      };

    checks.x86_64-linux.build = self.defaultPackage.x86_64-linux;

  };

}
#+end_src

* flake check

** [[https://discourse.nixos.org/t/my-painpoints-with-flakes/9750/5][My painpoints with flakes - NixOS Discourse]]
* using git submodules with flake ?
** FIXME [[https://discourse.nixos.org/t/is-it-possible-to-use-git-submodules-with-flakes/10257][Is it possible to use git submodules with flakes? - Learn - NixOS Discourse]]

- impure mode
#+begin_src nix :async t :exports both :results output
imports = [
# some stuff
] ++ (if builtins.pathExists (builtins.getEnv "PWD" + "/secrets/at_home.nix") then [ (builtins.getEnv "PWD" + "/secrets/at_home.nix") ] else [ ]);
#+end_src
* flake devShell
:PROPERTIES:
:ID:       d664a2a5-461f-4aa7-8bd3-ed6e8934ce7a
:END:

- [2020-12-19 Sat 13:43] <- [[id:6e001e4d-4564-40ac-bba4-ffb93f8aba23][nix develop: Add --redirect flag to redirect dependencies by edolstra · Pull Request #4161 · NixOS/nix]]
- [2021-01-05 Tue 02:13] -> [[id:2ba3dbae-6d17-45d9-9285-2e3b55a4eec2][Tweag + Nix Dev Update #3 - Development - NixOS Discourse]]

** [[https://github.com/pauldub/nix-dev-shells/blob/master/flake.nix][nix-dev-shells/flake.nix at master · pauldub/nix-dev-shells]]
* nix flakes dev update
:PROPERTIES:
:ID:       e69bb8b4-75e9-4887-98f4-73542602e8c6
:END:
 - [2021-01-05 Tue 02:12] -> [[id:14fa5200-b22f-44fa-b76a-a91e44d1090f][Tweag + Nix Dev Update #5 - Development - NixOS Discourse]]
 - [2021-01-05 Tue 02:13] -> [[id:ff924256-2d59-47ec-9b6f-a67263b5534d][Tweag + Nix Dev Update #4 - Development - NixOS Discourse]]
 - [2021-01-05 Tue 02:13] -> [[id:2ba3dbae-6d17-45d9-9285-2e3b55a4eec2][Tweag + Nix Dev Update #3 - Development - NixOS Discourse]]

* [[https://github.com/numtide/nix-flakes-installer#github-actions][numtide/nix-flakes-installer: A temporary place to host Nix Flakes releases, until the NixOS project publishes official releases.]]

* flakes 3rdParty

** [[https://github.com/nix-community/flake-nimble][nix-community/flake-nimble: Nimble packages Nix flake [maintainer=@ehmry] - Brave]] :nim:
