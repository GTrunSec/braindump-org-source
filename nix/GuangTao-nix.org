#+TITLE: GuangTao's Nix
#+AUTHOR: GTrunSec
#+EMAIL: gtrunsec@hardenedlinux.org
#+DATE: 2020-11-29 Sun
#+SETUPFILE: ../hugo.setup
#+SETUPFILE: ../theme-readtheorg.setup
#+SETUPFILE: ../tags/nix-tags.setup
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS: prop:t p:t

- tags :: [[file:../programming-languages.org][My learning Programming languages]], [[file:nixos.org][NixOS]], [[file:nixops.org][NixOps]]
  
* Nix Documents
:PROPERTIES:
:ID:       b3517c38-80fc-490f-b0e9-7fef04fd854f
:END:
 - [2020-12-19 Sat 14:35] -> [[id:0196e56d-f4d4-451d-8848-3f37119e7856][Flakes wiki]]
** [[https://nix.dev/][Welcome to nix.dev — nix.dev documentation]]

* Nix Learn materials
:PROPERTIES:
:ID:       f125fef0-d7b8-4145-ba15-5a4b3e92abaa
:END:
- [2020-12-05 Sat 14:19] <- [[id:a02049b7-89fa-41d0-99f0-b171957245a8][Burke Libbey - YouTube]]
** [[https://www.youtube.com/watch?v=2mG0zM_wtYs][Everything You Always Wanted To Know About Nix (But Were Afraid To Ask) - YouTube]]
:PROPERTIES:
:ID:       69d4adbf-d5cb-4cbb-90ea-5ea3f1bd5999
:END:
** [[https://www.youtube.com/watch?v=mKXLAbrKrno][Functional programming and Nix for reproducible, immutable infrastructure - YouTube]]


* Long-term learning config
** [#A] [[https://github.com/wiedzmin/nixos-config/tree/master/modules][nixos-config/modules at master · wiedzmin/nixos-config]]
** [#A] [[https://github.com/maxhbr/myconfig][maxhbr/myconfig: my Linux Configuration]]
** [#A] [[https://github.com/evanjs/nixos_cfg/blob/master/modules/home-manager/randr/work.nix][nixos_cfg/work.nix at master · evanjs/nixos_cfg]]
** [[https://github.com/coreyoconnor/nix_configs/tree/master][coreyoconnor/nix_configs: The NixOS configuration for my desktop.]]
** TODO [#A] [[https://github.com/jlesquembre/dotfiles/tree/master][jlesquembre/dotfiles: My dotfiles]]
** [[https://github.com/charvp/nixos-config/tree/master/programs][nixos-config/programs at master · charvp/nixos-config]]

** User
*** [[https://github.com/zimbatm][zimbatm (zimbatm)]]


* Nix Overlays
:PROPERTIES:
:ID:       72dd4354-5092-433e-aade-6df04bf6c96d
:END:
- [[id:a7ec1635-5502-4b02-922f-fc4489c4d352][home-manager overlay]]
** ROS on Nix
:PROPERTIES:
:ID:       2e14b38e-081e-4de8-9466-4db3e2e3291a
:END:
- [[id:f97dc1ae-97a8-44ca-8f94-1212d8905c12][lopsided98/nix-ros-overlay: ROS overlay for the Nix package manager]]
** Haskell Overlay
:PROPERTIES:
:id: 0f7615af-e259-43e3-99b3-e0b69ba1d61b
:END:

- [2020-10-26 Mon 21:56] -> [[id:1247ef62-a9d8-4779-a793-97802be399f4][Nix Haskell Development (2020) - Howto - NixOS Discourse]]
** Python Overlay
:PROPERTIES:
:ID:       abf91e96-c75b-4313-8ac7-da713ae86a4f
:END:

-/.config/nixpkgs/nixos/channel/nixpkgs/pkgs/servers/syncserver/

*** [[https://discourse.nixos.org/t/how-to-override-python-package-anki/8213][How to override Python package (Anki)? - Learn - NixOS Discourse]]
:PROPERTIES:
:ID:       2154d26e-213b-4ef4-9081-4960f8facb73
:END:
** Overlay in mkShell
*** [[https://discourse.nixos.org/t/how-to-override-stdenv-for-all-packages-in-mkshell/10368][How to override stdenv for all packages in mkShell - Learn - NixOS Discourse]]

* Programming languages Environment
** wiki
- https://nixos.wiki/wiki/Language-specific_package_helpers

** Nix [[file:../programming/GuangTao-rust.org][GuangTao's Rust]]
:PROPERTIES:
:id: 8eba3b48-150b-4ca6-a794-79f341d860aa
:END:
- [2020-12-07 Mon 21:01] -> [[id:36aa9c9d-bf10-40f0-9463-b5169ffa1f2a][nix-community/redoxpkgs: Cross-compile to Redox using Nix [maintainer=@aaronjanse]​]]
*** [[https://discourse.nixos.org/t/comparing-solutions-for-building-rust-on-nix/10707][Comparing solutions for building Rust on Nix - Development - NixOS Discourse]]

*** [[https://github.com/nmattia/naersk][nmattia/naersk: Build rust crates in Nix. No configuration, no code generation, no IFD. Sandbox friendly.]]
:PROPERTIES:
:id: 02aa0111-a92e-41d6-abca-ce4cc6c7a931
:END:
- [2020-11-11 Wed 16:19] <- [[id:a3de31d7-f2be-4939-a19f-0bfd4ddba542][rust nix]]
*** [[https://github.com/Kloenk/rusty-nix][Kloenk/rusty-nix: Nix written in rust (this will take some time if it will ever finish)]]
** Nix [[file:../programming/GuangTao-haskell.org][GuangTao's Haskell]]
:PROPERTIES:
:ID:       fdd307fb-61eb-4b95-a622-2738c75c4d46
:END:
- [2020-12-09 Wed 20:08] <- [[id:f2731e82-6522-4694-9fb0-2caeebf6028f][input-output-hk/haskell.nix: Alternative Haskell Infrastructure for Nixpkgs]]
- [2020-12-06 Sun 14:47] -> [[id:b73b472f-cc81-4bf9-b4ee-7fc2b967b86e][MatrixAI/Haskell-Demo: Haskell Demo Project using Nix]]
- [2020-10-26 Mon 21:56] <- [[id:0f7615af-e259-43e3-99b3-e0b69ba1d61b][Haskell Overlay]]
*** Haskell Infrastructure for Nixpkgs
**** [[https://github.com/input-output-hk/haskell.nix][input-output-hk/haskell.nix: Alternative Haskell Infrastructure for Nixpkgs]]
**** [[https://github.com/reflex-frp/reflex-platform][reflex-frp/reflex-platform: A curated package set and set of tools that let you build Haskell packages so they can run on a variety of platforms. reflex-platform is built on top of the nix package manager.]]

*** Haskell Development -> NixPkgs
**** [[https://discourse.nixos.org/t/nix-haskell-development-2020/6170][Nix Haskell Development (2020) - Howto - NixOS Discourse]]
:PROPERTIES:
:ID:       1247ef62-a9d8-4779-a793-97802be399f4
:END:
:BACKLINKS:
[2020-10-26 Mon 21:56] <- [[id:0f7615af-e259-43e3-99b3-e0b69ba1d61b][Haskell Overlay]]
:END:
- [[https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/haskell-modules/configuration-common.nix][nixpkgs/configuration-common.nix at master · NixOS/nixpkgs]]
**** [[https://www.youtube.com/watch?v=a22y82ROKyA][Peter Simons: Inside of the Nixpkgs Haskell Infrastructure (NixCon 2015) - YouTube]]
*** Nix Haskell Documents for beginning
**** [[https://www.srid.ca/1948201.html][Nix recipes for Haskellers - Sridhar Ratnakumar]]
**** [[https://github.com/Gabriel439/haskell-nix][Gabriel439/haskell-nix: Nix and Haskell in production]]
** Nix [[file:../programming/GuangTao-python.org][GuangTao's Python]]
:PROPERTIES:
:ID:       f08fdb79-58f8-4186-b890-06e1486702e9
:END:
[[id:2154d26e-213b-4ef4-9081-4960f8facb73][How to override Python package (Anki)? - Learn - NixOS Discourse]]
*** [[https://github.com/DavHau/mach-nix][GitHub - DavHau/mach-nix: Tool to create highly reproducible python environments]]
#+begin_src sh :async t :exports both :results output
nix-env -if https://github.com/DavHau/mach-nix/tarball/2.4.1 -A mach-nix
#+end_src

** Nix [[file:../programming/GuangTao-golang.org][GuangTao's Golang]]
:PROPERTIES:
:id: 33107453-baf3-4e27-871b-833b93f5ad76
:END:
- [2020-11-20 Fri 01:18] -> [[id:d1d661f8-178c-4bd9-b848-0a2b768066f5][orivej/go-nix: Nix language parser and Nix-compatible file hasher in Go]]

*** [[https://nixos.org/manual/nixpkgs/stable/#ssec-go-legacy][NixOS - Nixpkgs 20.03 manual]]

*** Go Nix discussing
- [[https://discourse.nixos.org/t/build-golang-code-provided-not-as-go-module/9543/10][Build GoLang code provided not as Go module - Learn - NixOS Discourse]]
  
** Nix [[file:../programming/node.org][GuangTao's Node Java]]
*** https://andreas.rammhold.de/posts/ranz2nix/
*** [[https://github.com/nix-community/yarn2nix][nix-community/yarn2nix: Generate nix expressions from a yarn.lock file [maintainer=???]​]]

** Nix [[file:../programming/GuangTao-golang.org][GuangTao's Golang]]

*** C/C++ Nix infrastructure
:PROPERTIES:
:ID:       0680ffeb-a824-4dec-b15d-0e8ec04e97b9
:END:

- [2020-11-07 Sat 22:56] -> [[id:2cac43cc-1cbd-4092-a275-83856018a0a8][Nix Friday - C/CPP infrastructure in Nix - with Mic92 - YouTube]]

* configuration flakes
:PROPERTIES:
:ID:       8a9e45f4-fa22-41b9-9862-d653ea91822c
:END:
- [2020-11-09 Mon 15:40] <- [[id:0fbe152b-bad6-4054-a201-c51ab509ed73][flakes]]
** [[https://github.com/nrdxp/nixflk/][nrdxp/nixflk: highly structured NixOS configuration database]]
** [[https://github.com/bqv/nixrc/blob/live/flake.nix][nixrc/flake.nix at live · bqv/nixrc]]
** [[https://github.com/abcdw/rde/][abcdw/rde: My reproducible development environment]]
** [[https://github.com/LEXUGE/nixos][LEXUGE/nixos: A fully automated replicable nixos configuration set]]
** [[https://github.com/Ninlives/nixos-config][Ninlives/nixos-config: Bunch of Nix expressions for my working environment]]
** [[https://github.com/berbiche/dotfiles/blob/master/flake.nix][dotfiles/flake.nix at master · berbiche/dotfiles]]
** [[https://github.com/ImExtends/nixos-conf/blob/master/flake.nix][nixos-conf/flake.nix at master · ImExtends/nixos-conf]]
** [[https://github.com/l5r/nixcfg/blob/template/flake.nix][nixcfg/flake.nix at template · l5r/nixcfg]]
** [[https://github.com/cole-h/nixos-config/blob/nixus/flake.nix][nixos-config/flake.nix at nixus · cole-h/nixos-config]]
** https://github.com/Kloenk/nix/blob/master/flake.nix
** [[https://github.com/qjcg/nix][qjcg/nix: My personal nix configuration]]
** [[https://github.com/johnae/tektonix/tree/master][johnae/tektonix: TektonCD pipelines using the NixOS module system.]]



* Nix flakes
:PROPERTIES:
:ID:       0fbe152b-bad6-4054-a201-c51ab509ed73
:END:
- [2020-11-20 Fri 02:31] <- [[id:0ba37b42-f3e7-453a-b021-3f817b9264e8][Pushing Flake inputs to Cachix]]
- [2020-11-20 Fri 02:28] <- [[id:2e37c4e9-b74d-490c-9b12-fc5aade3de68][Nix Friday - Flakes! - YouTube]]
- [2020-11-09 Mon 22:30] -> [[id:fdf6b3e7-b611-449e-889b-bd8398b252e1][Nix flake issue]]
- [2020-11-09 Mon 15:40] -> [[id:8a9e45f4-fa22-41b9-9862-d653ea91822c][configuration flakes]]

** Flakes wiki
:PROPERTIES:
:ID:       0196e56d-f4d4-451d-8848-3f37119e7856
:END:
- [2020-12-19 Sat 14:35] <- [[id:b3517c38-80fc-490f-b0e9-7fef04fd854f][Nix Documents]]
*** [[https://nixos.wiki/wiki/Flakes][Flakes - NixOS Wiki]]
- [[https://gist.github.com/edolstra/40da6e3a4d4ee8fd019395365e0772e7][nix-flakes.md]]
- option ~/.config/nix/nix.conf

  #+begin_src conf :async t :exports both :results output
  experimental-features = nix-command flakes
  #+end_src
*** Flake Output scheme

  #+begin_src nix :async t :exports both :results output

{ self, ... }@inputs:
{
  # This will be shown in `nix flake info`
  description = "A description what his flake provides";
  # Executed by `nix flake check`
  checks."<system>"."<attr>" = derivation;
  # Executed by `nix build .#<name>`
  packages."<system>"."<attr>" = derivation;
  # Executed by `nix build .`
  defaultPackage."<system>" = derivation;
  # Executed by `nix run .#<name>`
  apps."<system>"."<attr>" = {
    type = "app";
    program = "<store-path>";
  };
  # Executed by `nix run . -- <args?>`
  defaultApp."<system>" = { type = "app"; program = "..."; };

  # Used for nixpkgs packages, also accessible via `nix build .#<name>`
  legacyPackages."<system>"."<attr>" = derivation;
  # Default overlay, for use in dependent flakes
  overlay = final: prev: { };
  # Same idea as overlay but a list or attrset of them.
  overlays = {};
  # Default module, for use in dependent flakes
  nixosModule = { config }: { options = {}; config = {}; };
  # Same idea as nixosModule but a list or attrset of them.
  nixosModules = {};
  # Attrset of nixos configurations by hostname.
  nixosConfigurations."<hostname>" = {};
  hydraJobs."<attr>"."<system>" = derivation;
  # Used by `nix flake init -t <flake>`
  defaultTemplate = {
    path = "<store-path>";
    description = "template description goes here?";
  };
  # Used by `nix flake init -t <flake>#<attr>`
  templates."<attr>" = { path = "<store-path>"; description = "";
}
#+end_src
*** [[https://zimbatm.com/NixFlakes/#direnv-integration][Nix Flakes edition | $ zimbatm]]
:PROPERTIES:
:ID:       09df2341-7aa3-4f56-a823-04b4e591988d
:END:
- [2020-11-06 Fri 19:22] <- [[id:0ba37b42-f3e7-453a-b021-3f817b9264e8][Pushing Flake inputs to Cachix]]
** [[https://github.com/numtide/flake-utils][numtide/flake-utils: Pure Nix flake utility functions]]

- [[https://github.com/numtide/flake-utils/blob/master/examples/each-system/flake.nix][flake-utils/flake.nix at master · numtide/flake-utils]]
  + eachDefaultSystem

    #+begin_src nix :async t :exports both :results output

  {
    description = "Flake utils demo";

    inputs.flake-utils.url = "github:numtide/flake-utils";

    outputs = { self, nixpkgs, flake-utils }:
      flake-utils.lib.eachDefaultSystem (system:
        let pkgs = nixpkgs.legacyPackages.${system}; in
        rec {
          packages = flake-utils.lib.flattenTree {
            hello = pkgs.hello;
            gitAndTools = pkgs.gitAndTools;
          };
          defaultPackage = packages.hello;
          apps.hello = flake-utils.lib.mkApp { drv = packages.hello; };
          defaultApp = apps.hello;
        }
      );
  }
    #+end_src

  + simple-flake

- [[https://github.com/zimbatm/flake-static/tree/0cf37e62aae157409342a85f5f499f216bdcd2fe][zimbatm/flake-static at 0cf37e62aae157409342a85f5f499f216bdcd2fe]]

    + nixpkgs lib

#+begin_src sh :async t :exports both :results output

let
  importJSON = file: builtins.fromJSON (builtins.readFile file);
  flakeLock = importJSON ./flake.lock;
  loadInput = { locked, ... }:
    assert locked.type == "github";
    builtins.fetchTarball {
      url = "https://github.com/${locked.owner}/${locked.repo}/archive/${locked.rev}.tar.gz";
      sha256 = locked.narHash;
    };
  nixpkgs = loadInput flakeLock.nodes.nixpkgs;
in
import nixpkgs {
  config = { };
  overlays = [ ];
}

#+end_src

** hydra CI build packages
- [[https://github.com/edolstra/dhdm/blob/master/flake.nix][dhdm/flake.nix at master · edolstra/dhdm]]

#+begin_src nix :async t :exports both :results output
{
  inputs.nixpkgs.url = "nixpkgs/nixos-20.03";

  outputs = { self, nixpkgs }: {

    defaultPackage.x86_64-linux =
      with import nixpkgs { system = "x86_64-linux"; };
      stdenv.mkDerivation {
        name = "dhdm";
        buildInputs = [ mesa_glu glew glfw libpng glm fmt nlohmann_json opensubdiv boost ];
        src = self;
        preBuild = "cd src";
        installPhase = "mkdir -p $out/bin; cp dhdm $out/bin/";
        enableParallelBuilding = true;
      };

    checks.x86_64-linux.build = self.defaultPackage.x86_64-linux;

  };

}
#+end_src

** [[https://discourse.nixos.org/t/tweag-nix-dev-update-4/9862][Tweag + Nix Dev Update #4 - Development - NixOS Discourse]]

#+begin_src nix :async t :exports both :results output
nix develop \
  --redirect .#hydraJobs.build.x86_64-linux.nix ~/Dev/nix/outputs/out \
  --redirect .#hydraJobs.build.x86_64-linux.nix.dev ~/Dev/nix/outputs/dev
#+end_src
** learning flakes

- [[https://www.youtube.com/watch?v=98EwejpIJzE][Flakes in nix 3.0 - YouTube]]
- [[https://discourse.nixos.org/t/good-practice-for-nix-flakes/9706/2][Good practice for Nix Flakes - Learn - NixOS Discourse]]
- [[https://www.tweag.io/blog/2020-05-25-flakes/][Tweag - Nix Flakes, Part 1: An introduction and tutorial]]
- [[https://www.tweag.io/blog/2020-06-25-eval-cache/][Tweag - Nix Flakes, Part 2: Evaluation caching]]
- [[https://www.tweag.io/blog/2020-07-31-nixos-flakes/][Tweag - Nix Flakes, Part 3: Managing NixOS systems]]
** flake check

*** [[https://discourse.nixos.org/t/my-painpoints-with-flakes/9750/5][My painpoints with flakes - NixOS Discourse]]
** using git submodules with flake ?
*** FIXME [[https://discourse.nixos.org/t/is-it-possible-to-use-git-submodules-with-flakes/10257][Is it possible to use git submodules with flakes? - Learn - NixOS Discourse]]

- impure mode
#+begin_src nix :async t :exports both :results output
imports = [
# some stuff
] ++ (if builtins.pathExists (builtins.getEnv "PWD" + "/secrets/at_home.nix") then [ (builtins.getEnv "PWD" + "/secrets/at_home.nix") ] else [ ]);
#+end_src
** flake devShell
:PROPERTIES:
:ID:       d664a2a5-461f-4aa7-8bd3-ed6e8934ce7a
:END:

- [2020-12-19 Sat 13:43] <- [[id:6e001e4d-4564-40ac-bba4-ffb93f8aba23][nix develop: Add --redirect flag to redirect dependencies by edolstra · Pull Request #4161 · NixOS/nix]]

*** [[https://github.com/pauldub/nix-dev-shells/blob/master/flake.nix][nix-dev-shells/flake.nix at master · pauldub/nix-dev-shells]]
* Nix Security
** [[https://github.com/jollheef/localhost/blob/master/security.nix][localhost/security.nix at master · jollheef/localhost]]
** Nix SElinux
*** Security-Enhanced Linux
:PROPERTIES:
:original-authors: NSA and Red Hat
:developers: Red Hat
:initial-release: December 22, 2000; 19 years ago (2000-12-22)
:stable-release: 3.0/4 December 2019; 10 months ago (2019-12-04)
:repository: github.com/SELinuxProject/selinux
:written-in: C
:operating-system: Linux
:type:     Security, Linux Security Modules (LSM)
:license:  GNU GPL
:website:  selinuxproject.org, nsa.gov/What-We-Do/Research/SELinux/
:wikinfo-id: 55908
:URL:      https://en.wikipedia.org?curid=55908
:END:
Security-Enhanced Linux (SELinux) is a Linux kernel security module that provides a mechanism for supporting access control security policies, including mandatory access controls (MAC). SELinux is a set of kernel modifications and user-space tools that have been added to various Linux distributions. Its architecture strives to separate enforcement of security decisions from the security policy, and streamlines the amount of software involved with security policy enforcement.

- [[https://www.redhat.com/zh/topics/linux/what-is-selinux][SELinux是什么? 开启SELinux - 红帽]]
  
*** [[https://nixos.wiki/wiki/Workgroup:SELinux][Workgroup:SELinux - NixOS Wiki]]
#+begin_src nix :async t :exports both :results output
 boot.kernelPatches = [ {
       name = "selinux-config";
       patch = null;
       extraConfig =
               SECURITY_SELINUX y
               SECURITY_SELINUX_BOOTPARAM n
               SECURITY_SELINUX_DISABLE n
               SECURITY_SELINUX_DEVELOP y
               SECURITY_SELINUX_AVC_STATS y
               SECURITY_SELINUX_CHECKREQPROT_VALUE 0
               DEFAULT_SECURITY_SELINUX n
             ;
       } ];
#+end_src
** Nix vulnerability
*** [[https://github.com/andir/nix-vulnerability-scanner][andir/nix-vulnerability-scanner]]
** Nix Security option
*** [[https://discourse.nixos.org/t/default-security-settings/9755/2][Default security settings - Development / Security - NixOS Discourse]]
#+begin_src nix :async t :exports both :results output
security.lockKernelModules = false 
#+end_src


Disable kernel module loading once the system is fully initialised.
Module loading is disabled until the next reboot.  Problems caused by delayed module loading can be fixed by adding the module(s) in question to <option>boot.kernelModule


* home-manager
- [[https://rycee.gitlab.io/home-manager/index.html#_how_do_set_up_a_configuration_for_multiple_users_machines][Home Manager Manual]]
** home-manager overlay
:PROPERTIES:
:id: a7ec1635-5502-4b02-922f-fc4489c4d352
:END:

- [2020-09-30 Wed 20:54] <- [[id:72dd4354-5092-433e-aade-6df04bf6c96d][Nix Overlays]]

- {{{emebed(())}}}

- [[https://discourse.nixos.org/t/using-an-overlay-in-home-manager/6302][Using an overlay in home-manager - Learn - NixOS Discourse]]


#+begin_src nix :async t :exports both :results output


{ config, pkgs, ... }:

let
  pkgsUnstable = import <unstable> {};
in

{
  nixpkgs.overlays = [
    (final: previous: {
      skim = pkgsUnstable.skim;
    })
  ];

  programs.home-manager.enable = true;
  programs.skim.enable = true;
}

#+end_src

** IsLinux or IsDarwin

- [[https://github.com/nix-community/home-manager/issues/414][Infinite Recursion With stdenv functions · Issue #414 · nix-community/home-manager · GitHub]]


* Cachix
** push binary cache with nix-shell
#+begin_src sh :async t :exports both :results output
nix-store --query --references $(nix-instantiate my-default.nix) | xargs nix-store --realise | xargs nix-store --query --requisites | cachix push nsm-data-analysis
#+end_src
** Pushing Flake inputs to Cachix
:PROPERTIES:
:ID:       0ba37b42-f3e7-453a-b021-3f817b9264e8
:END:
- [2020-11-06 Fri 19:22] -> [[id:09df2341-7aa3-4f56-a823-04b4e591988d][Nix Flakes edition | $ zimbatm]]
- [2020-11-20 Fri 02:31] -> [[id:0fbe152b-bad6-4054-a201-c51ab509ed73][flakes]]


- [[id:09df2341-7aa3-4f56-a823-04b4e591988d][Nix Flakes edition | $ zimbatm]]

  #+begin_src sh :async t :exports both :results output
  nix flake archive --json \
      | jq -r '.path,(.inputs|to_entries[].value.path)' \
      | cachix push $cache_name
  #+end_src

- nix build -> soultion

  #+begin_src sh :async t :exports both :results output
  nix path-info --json | jq -r '.[].path' | cachix push $cache_name
  #+end_src


- nix develop

  #+begin_src sh :async t :exports both :results output
  nix develop --profile dev-profiile && cachix push mycache dev-profile
  #+end_src



** [[https://discourse.nixos.org/t/how-to-push-the-derivations-from-a-shell-nix-to-cachix/3172][How to push the derivations from a shell.nix to cachix? - Learn - NixOS Discourse]]

#+begin_src sh :async t :exports both :results output
nix-store --query --references $(nix-instantiate default.nix) | \xargs nix-store --realise | xargs nix-store --query --requisites | cachix push $NAME
#+end_src

* Nix Shell
** [[https://discourse.nixos.org/t/packaging-a-shell-script-that-has-completions/10290][Packaging a shell script that has completions - Learn - NixOS Discourse]]

#+begin_src nix :async t :exports both :results output
nativeBuildInputs = [ installShellFiles ];

postInstall = ''
  installShellCompletion xsos-bash-completion.bash
'';
#+end_src


* nix expressions
:PROPERTIES:
:id: 0dcb0b08-5d66-4cf9-8b14-fafaccb739b0
:END:
- [2020-11-09 Mon 19:12] ->   [[id:3ab69c8f-30f5-4eb6-9d40-8430aaf8203f][GTrunSec/nix-expressions-jupyter-repl-test]]
** Nix language
*** [[https://www.youtube.com/watch?v=X2GJv0vrLo0][Nix Expression Language in under 5 Minutes - YouTube]]

- [[https://gist.github.com/jD91mZM2/ccc42f1068780a52ed20c212120ebdac][presentation.org]]
*** [[https://www.youtube.com/watch?v=m4sv2M9jRLg][“Nix Fundamentals - YouTube”🔊]] :nix:expression:

*** [[https://nix.dev/anti-patterns/language.html][Nix language — nix.dev documentation]]
** [[https://github.com/zimbatm/nix-experiments][zimbatm/nix-experiments]]
** parser
*** [[https://github.com/orivej/go-nix][orivej/go-nix: Nix language parser and Nix-compatible file hasher in Go]]
:PROPERTIES:
:id: d1d661f8-178c-4bd9-b848-0a2b768066f5
:END:

- [2020-11-20 Fri 01:18] <- [[id:33107453-baf3-4e27-871b-833b93f5ad76][Nix Golang]]
*** [[https://github.com/nprindle/nix-parsec][nprindle/nix-parsec]]
** ✰ IMPORTANT [[https://nixos.wiki/wiki/Nix_Expression_Language][Nix Expression Language - NixOS Wiki]]
** nix-path
*** [[https://stackoverflow.com/questions/43850371/when-does-a-nix-path-type-make-it-into-the-nix-store-and-when-not/43850372#43850372][nixos - When does a nix path type make it into the nix store and when not? - Stack Overflow]]


* Nix Hash
** [[https://github.com/jwiegley/nix-update-el][jwiegley/nix-update-el: An Emacs command for updating fetch declarations in place]]
** [[https://github.com/numtide/rnix-hashes][numtide/rnix-hashes: Nix Hash Converter]]


* Nix Env
** [[https://github.com/target/lorri][target/lorri: Your project's nix-env]]


* Nix template
** [[https://github.com/nix-dot-dev/getting-started-nix-template][nix-dot-dev/getting-started-nix-template: Based on nix.dev tutorials, repository template to get you started with Nix.]]


* Audio

** [[https://github.com/lopsided98/zeus_audio/blob/master/flake.nix][zeus_audio/flake.nix at master · lopsided98/zeus_audio]]

* Nix Router

** https://github.com/GTrunSec/nixwrt
* Service deployment
** [[https://github.com/svanderburg/disnix][svanderburg/disnix: Disnix: A Nix-based distributed service deployment tool]]
*** [[https://sandervanderburg.blogspot.com/2020/10/transforming-disnix-models-to-graphs.html][Sander van der Burg's blog: Transforming Disnix models to graphs and visualizing them]]

** https://github.com/svanderburg/nix-processmgmt

* Enhanced nix configuration
** [[https://github.com/tweag/nickel][tweag/nickel: Cheap configuration language]] :parser:query:

Nickel is a lightweight configuration language. Its purpose is to automate the generation of static configuration files - think JSON, YAML, XML, or your favorite data representation language - that are then fed to another system. It is designed to have a simple, well-understood core: at its heart, it is JSON with functions. It adds other features on top of it to improve expressivity and modularity, but you can do just fine without using it.
* Nix Emacs
** [[https://github.com/vlaci/nix-doom-emacs][vlaci/nix-doom-emacs: doom-emacs packaged for Nix]]
** [[https://github.com/nix-community/emacs-overlay][nix-community/emacs-overlay: Bleeding edge emacs overlay [maintainer=@adisbladis]​]]
* ROS to Nix
:PROPERTIES:
:ID:       dc7cc7f9-fb80-46d1-89c7-cb7def5ba1f4
:END:
:RELATED:
[2020-10-30 Fri 02:59] -> [[id:f97dc1ae-97a8-44ca-8f94-1212d8905c12][lopsided98/nix-ros-overlay: ROS overlay for the Nix package manager]]
:END:

* NixOS container
** [[https://github.com/erikarvstedt/extra-container][erikarvstedt/extra-container: Run declarative NixOS containers without full system rebuilds]]

* Other language implementation Nix

** [[https://github.com/haskell-nix/hnix][haskell-nix/hnix: A Haskell re-implementation of the Nix expression language]]

- [[file:GuangTao-haskell.org][GuangTao's Haskell]]
* Nix cross-compiling
** [[https://github.com/pololu/nixcrpkgs][pololu/nixcrpkgs: Tools for cross-compiling standalone applications using Nix.]]
** [[https://github.com/Mic92/nix-ld][Mic92/nix-ld: Run unpatched dynamic binaries on NixOS]]
* Nix ISSUE
** Nix flake issue
:PROPERTIES:
:ID:       fdf6b3e7-b611-449e-889b-bd8398b252e1
:END:
- [2020-11-09 Mon 22:30] <- [[id:0fbe152b-bad6-4054-a201-c51ab509ed73][flakes]]
*** [[https://github.com/NixOS/nix/issues/3821][Adding package to devShell causes `error: stack overflow (possible infinite recursion)` · Issue #3821 · NixOS/nix]]

#+begin_src nix :async t :exports both :results output
systemd.services.nix-daemon.serviceConfig.LimitSTACKSoft = "infinity";
#+end_src

* Nix develop
** Nix Develop 3rdparty

*** [[https://github.com/maralorn/nix-output-monitor][maralorn/nix-output-monitor: Pipe your nix-build output through the nix-output-monitor a.k.a nom to get additional information while building.]]

** [[https://discourse.nixos.org/t/tweag-nix-dev-update-5/10560][Tweag + Nix Dev Update #5 - Development - NixOS Discourse]]

** [[https://github.com/NixOS/nix/pull/4161/commits/750ce500c221ecd4720a5b02e3f3cbb0bc05ef9d][nix develop: Add --redirect flag to redirect dependencies by edolstra · Pull Request #4161 · NixOS/nix]]
:PROPERTIES:
:ID:       6e001e4d-4564-40ac-bba4-ffb93f8aba23
:END:
- [2020-12-19 Sat 13:43] -> [[id:d664a2a5-461f-4aa7-8bd3-ed6e8934ce7a][flake devShell]]


*** [[https://discourse.nixos.org/t/tweag-nix-dev-update-4/9862][Tweag + Nix Dev Update #4 - Development - NixOS Discourse]]
:PROPERTIES:
:ID:       ff924256-2d59-47ec-9b6f-a67263b5534d
:END:

* Visual Nix

** [[https://github.com/GTrunSec/grafanix][GTrunSec/grafanix: Visualize your Nix dependencies!]]

** [[https://github.com/symphorien/nix-du][symphorien/nix-du: Visualise which gc-roots to delete to free some space in your nix store]]
* Nix dependency manager
** [[https://github.com/obsidiansystems/nix-thunk][obsidiansystems/nix-thunk]]
* Useful Nix Bin Scripts
** [[https://github.com/ryantrinkle/nix-build-inplace/blob/master/nix-build-inplace][nix-build-inplace/nix-build-inplace at master · ryantrinkle/nix-build-inplace]]
** [[https://github.com/elitak/nixos-infect][elitak/nixos-infect: [GPLv3+] install nixos over the existing OS in a DigitalOcean droplet (and others with minor modifications)]]
* Nix Docker deployment
** [[https://github.com/barrucadu/nixfiles/blob/master/hosts/dreamlands/configuration.nix][nixfiles/configuration.nix at master · barrucadu/nixfiles]]
* Nix GUI
** [[https://github.com/pmiddend/nixos-manager][pmiddend/nixos-manager: Manage your NixOS packages and configuration via a simple, intuitive UI]]

* Nix Project

** [[https://github.com/tweag/jupyterWith][tweag/jupyterWith: declarative and reproducible Jupyter environments - powered by Nix]]
:PROPERTIES:
:ID: d2d3ecc6-4e75-483f-88b3-7a5d3bfbbd81
:END:

- [2020-11-23 Mon 20:02] <- [[id:5bad5a83-d6ab-44bd-a40d-ddcefb4928f5][add examples for mach-nix and conda by DavHau · Pull Request #135 · tweag/jupyterWith]]

- [[file:Jupyter-data-science.org][Jupyter Data Science]]

* Nix Option

** Nix binary substitutions

*** [[https://github.com/tweag/trustix][tweag/trustix]]

* Advent of Code with Nix
:PROPERTIES:
:id: 7726d48c-5ff3-45e0-9ba9-53bc9af2f186
:END:

- [2020-12-11 Fri 21:29] <- [[id:40cfb238-83d9-4697-a3ab-20c22e392ad4][Advent of Code 2020]]
- [2020-12-01 Tue 14:57] <- [[id:879e7b4a-dbd1-41c1-a2ec-f826d438379b][Advent of Code 2019]]
* Nix Modules
:PROPERTIES:
:ID:       a931ebeb-015b-49fd-875b-682986cef960
:END:
- [2020-12-20 Sun 19:59] <- [[id:8ce6b2f8-5342-4d49-8518-5ffb551d1ec5][obsidiansystems/obelisk-systemd: Turn your obelisk app into a systemd service]]

** [[https://github.com/nix-community/impermanence][nix-community/impermanence: Modules to help you handle persistent state on systems with ephemeral root storage [maintainer=@talyz]​]] :storage:

* Nix Darwin
:PROPERTIES:
:id: 5c5f33c3-c217-4693-b5f6-e5fdf0c744a9
:END:
 - [[file:nix-macos.org][Nix on MacOS]]

 - [2020-12-05 Sat 14:21] -> [[id:a02049b7-89fa-41d0-99f0-b171957245a8][Burke Libbey - YouTube]]
* Nix Video

** [[https://www.youtube.com/channel/UCSW5DqTyfOI9sUvnFoCjBlQ/videos][Burke Libbey - YouTube]]
:PROPERTIES:
:ID:       a02049b7-89fa-41d0-99f0-b171957245a8
:END:

- [2020-12-05 Sat 14:21] <- [[id:5c5f33c3-c217-4693-b5f6-e5fdf0c744a9][Nix Darwin]]
- [2020-12-05 Sat 14:20] <- [[id:f125fef0-d7b8-4145-ba15-5a4b3e92abaa][Nix Learn materials]]
* Nix to Npm
** [[https://github.com/serokell/nix-npm-buildpackage][serokell/nix-npm-buildpackage: Build nix packages that use npm/yarn]]
* Nix secrets
** [[https://github.com/lopsided98/nixos-secrets][lopsided98/nixos-secrets: A tool for managing secrets within NixOS]]
** [[https://github.com/Mic92/sops-nix][Mic92/sops-nix: Atomic secret provisioning for NixOS based on sops]]
** [[https://github.com/ryantm/agenix][ryantm/agenix: age-encrypted secrets for NixOS]]
** [[https://github.com/tweag/trustix][tweag/trustix]]
