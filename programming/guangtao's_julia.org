#+TITLE: GuangTao's Julia
#+AUTHOR: GTrunSec
#+EMAIL: gtrunsec@hardenedlinux.org
#+DATE: 18 September 2020
#+SETUPFILE: ~/Documents/org-notes/braindump/hugo.setup
#+SETUPFILE: ~/Documents/org-notes/braindump/theme-readtheorg.setup
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t


_ Tags :: [[file:../guangtao's_learning_programming_languages.org][GuangTao's learning Programming languages]], [[file:julia_packages.org][Julia lang Packages list]]

* Julia (programming language)
:PROPERTIES:
:license: mit (core), gpl v2; a makefile option omits gpl libraries
:url: https://en.wikipedia.org?curid=38455554
:typing-discipline: dynamic, nominative, parametric, optional
:os: linux, macos, windows and freebsd
:website: julialang.org
:designed-by: jeff bezanson, alan edelman, stefan karpinski, viral b. shah
:first-appeared: 2012; 8 years ago (2012)
:filename-extensions: .jl
:preview-release: 1.6.0-dev with daily updates (and 1.0.6 being worked on)
:stable-release: 1.5.2, / 24 september 2020; 28 days ago (2020-09-24)
:developer: jeff bezanson, stefan karpinski, viral b. shah, and other contributors
:wikinfo-id: 38455554
:paradigm: multi-paradigm: multiple dispatch (primary paradigm), procedural, functional, meta, multistaged
:platform: tier 1: x86-64, ia-32, 64-bit arm, cuda/nvidiagpus tier 2: windows 32-bit (64-bit is tier 1) tier 3:32-bit arm, powerpc, amd gpus. also has web browser support (for javascript and webassembly) and works in android. for more details see "supported platforms".
:implementation-language: julia, c, c++, scheme, llvm
:END:

Julia is a high-level, high-performance, dynamic programming language. While it is a general purpose language and can be used to write any application, many of its features are well-suited for numerical analysis and computational science.Distinctive aspects of Julia's design include a type system with parametric polymorphism in a dynamic programming language; with multiple dispatch as its core programming paradigm. Julia supports concurrent, (composable) parallel and distributed computing (with or without using MPI and/or the built-in corresponding to "OpenMP-style"threads), and direct calling of C and Fortran libraries without glue code.
* Julia tutorial or courses
:PROPERTIES:
:id: 0c1d1c3c-5182-4db8-b2dc-4c93c81f4243
:END:
- [2020-12-17 Thu 23:20] <- [[id:5366e5e7-8663-4dc7-b676-7b97f5257381][h-Klok/StatsWithJuliaBook]]
- [2020-12-10 Thu 01:29] <- [[id:ed9aaa03-b3de-4487-a770-100ee1411e61][Unicode Input · The Julia Language]]
- [2020-12-09 Wed 23:18] -> [[id:5e3a1b24-a5ad-40c1-bd36-009b885c5d5f][bkamins/Julia-DataFrames-Tutorial: A tutorial on Julia DataFrames package]]

** [#A] JuliaTutorial

*** [[https://github.com/hyper0x/JuliaBasics/tree/master/book][JuliaBasics/book at master · hyper0x/JuliaBasics]] :chinese:
:PROPERTIES:
:header-args:sh: :dir ~/data/Jupyter-data-science-environment/notebook
:END:


#+begin_src sh :async t :exports both :results output
git clone https://github.com/hyper0x/JuliaBasics.git
#+end_src


*** [[https://github.com/PaulSoderlind/JuliaTutorial][PaulSoderlind/JuliaTutorial: Julia Tutorial for Finance and Econometrics Students]]
:PROPERTIES:
:ID:       68964ee9-2d40-46bc-bc6c-dbe4f8c6a120
:END:

 - [2020-11-20 Fri 03:03] -> [[id:54f94d64-138c-4f43-8dc6-81c01654466f][financial course with Julia]]


** [[file:../math/mitmath_18S191.org][Course 18.S191 at MIT, fall 2020 _ Introduction to computational thinking with Julia:]]
:PROPERTIES:
:header-args:sh: :dir ~/data/Jupyter-data-science-environment
:ID:       b6dc7a84-c972-4733-9dc1-d1ac105e2fee
:END:

 - [2020-11-20 Fri 03:01] -> [[id:d5edd4b2-2ad8-43ef-9390-bce5dfd41b7c][math course with Julia]]

** [[https://github.com/BrianSipple/julia-scientific-programming--coursera][BrianSipple/julia-scientific-programming--coursera: Exercise files from the University of Cape Town's `Julia Scientific Programming` course on Coursera]]

** [[https://github.com/crstnbr/JuliaOulu20][crstnbr/JuliaOulu20: Julia Workshop 2020 @ University of Oulu, Finnland]]

** [[file:../financial/guangtao's_finance.org][GuangTao's Finance]]

*** [[https://github.com/PaulSoderlind/EmpiricalFinancePhD][GitHub - PaulSoderlind/EmpiricalFinancePhD: Empirical Finance Course (PhD, Julia code)]]
:PROPERTIES:
:ID:       cb4b3236-09f5-4fa8-8195-e1399a5b101a
:END:

 - [2020-11-20 Fri 03:02] -> [[id:54f94d64-138c-4f43-8dc6-81c01654466f][financial course with Julia]]

** [[file:../data_science/machine_learning.org][Machine Learning]]
:PROPERTIES:
:id: 06e237f2-f098-4908-ad35-1d78a7e17a4d
:END:

- [2020-11-30 Mon 22:41] <- [[id:09f95585-c43f-46ac-8b07-e40b5b5ac596][18.337 - Parallel Computing and Scientific Machine Learning]]
* Environment

** Julia Jupyter
:PROPERTIES:
:id: 6d821cd9-6a05-4c95-a4f2-9d561d1eeaf0
:END:

 - [2020-11-20 Fri 02:57] -> [[id:372518e1-2376-4d07-a38e-c6755acd2c55][GTrunSec/Jupyter-data-science-environment: Including Haskell, R, Julia,Python and Jupyter Kernels generated by Nix]]
* Improving the code speed

** [[https://discourse.julialang.org/t/improving-the-code-speed-by-employing-parallelism-for-asynchronous-task/47041][Improving the code speed by employing parallelism for asynchronous task - Usage / Performance - JuliaLang]]

* Python Support

** [[https://github.com/JuliaPy][JuliaPy · GitHub]]

*** [[https://github.com/JuliaPy/PyCall.jl][GitHub - JuliaPy/PyCall.jl: Package to call Python functions from the Julia language]]

*** [[https://github.com/JuliaPy/pyjulia][GitHub - JuliaPy/pyjulia: python interface to julia]]

* Julia math

** [[https://github.com/JuliaMath/Roots.jl][JuliaMath/Roots.jl: Root finding functions for Julia]]

* [[https://julialang.org/downloads/][Download Julia]]

* Julia discourse

** [[https://discourse.juliacn.com/t/topic/4806][Circuitscape，国家公园，自然保护 - 社区 - Julia中文社区]]
