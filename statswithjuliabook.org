#+TITLE: StatsWithJuliaBook
#+AUTHOR: GTrunSec
#+EMAIL: gtrunsec@hardenedlinux.org
#+DATE: 2020-12-09 Wed 12:25
#+SETUPFILE: ./hugo.setup
#+SETUPFILE: ./theme-readtheorg.setup
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t

- tags :: [[file:julia.org][My Julia]],[[file:my-books.org][My Library]]

* INPROCESS [[https://github.com/h-Klok/StatsWithJuliaBook][h-Klok/StatsWithJuliaBook]]
:PROPERTIES:
:ID:       a2d3b106-35bb-42c7-af55-b5d2e3589ba0
:END:
- [2020-12-09 Wed 12:48] <- [[id:0c1d1c3c-5182-4db8-b2dc-4c93c81f4243][Julia tutorial or courses]]
- [2020-12-09 Wed 12:27] -> [[id:306c7b79-8a54-4e5b-8678-444eab1327fd][Julia Books]]

1. [[https://github.com/StatisticalRethinkingJulia/StatisticsWithJuliaPlutoNotebooks.jl][StatisticalRethinkingJulia/StatisticsWithJuliaPlutoNotebooks.jl: Pluto notebooks accompanying the book Statistics With Julia (https://statisticswithjulia.org).]]

** [[https://github.com/h-Klok/StatsWithJuliaBook/tree/master/1_chapter][StatsWithJuliaBook/1_chapter at master Â· h-Klok/StatsWithJuliaBook]]

./notebook/StatsWithJuliaBook/1_chapter/

*** DONE bubbleSort.jl

#+begin_src julia :exports both :results output
function bubbleSort!(a)
    n = length(a)
    for i in 1:n-1
        for j in 1:n-i
            if a[j] > a[j+1]
                a[j], a[j+1] = a[j+1], a[j]
            end
        end
    end
    return a
end

data = [65, 51, 32, 12, 23, 84, 68, 1]
bubbleSort!(data)
#+end_src

#+RESULTS:
#+begin_example
bubbleSort! (generic function with 1 method)
8-element Array{Int64,1}:
 65
 51
 32
 12
 23
 84
 68
  1
8-element Array{Int64,1}:
  1
 12
 23
 32
 51
 65
 68
 84
#+end_example

- comprehension

#+begin_src julia :async t :exports both :results output
array1 = [(2n+1)^2 for n in 1:5]
array2 = [sqrt(i) for i in array1]
println(typeof(1:5), "  ", typeof(array1), "  ", typeof(array2))
1:5, array1, array2
#+end_src

#+RESULTS:
#+begin_example
5-element Array{Int64,1}:
   9
  25
  49
  81
 121
5-element Array{Float64,1}:
  3.0
  5.0
  7.0
  9.0
 11.0
UnitRange{Int64}  Array{Int64,1}  Array{Float64,1}
(1:5, [9, 25, 49, 81, 121], [3.0, 5.0, 7.0, 9.0, 11.0])
#+end_example


- fast.jl
#+begin_src julia :async t :exports both :results output
using Statistics

@time begin
    data = [mean(rand(5*10^2)) for _ in 1:10^6]
    println("98% of the means lie in the estimated range: ",
                    (quantile(data,0.01),quantile(data,0.99)) )
end
#+end_src

#+RESULTS:
: 98% of the means lie in the estimated range: (0.4698606931732886, 0.5300374817804305)
:   1.004519 seconds (1.74 M allocations: 3.936 GiB, 5.54% gc time)

*** imageProcessing

* Dependence packages

#+begin_src sh :async t :exports both :results output
julia_wrapped -e 'import Pkg; Pkg.add("LaTeXStrings");Pkg.add("Measures")'
#+end_src
